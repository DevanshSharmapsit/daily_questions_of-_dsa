//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    vector<vector<int>> insertInterval(vector<vector<int>> &intervals,
                                       vector<int> &newInterval) {
        // code here
        vector<vector<int>>ans;
        int n=intervals.size();
        
        // int a=newInterval[0];
        // int b=newInterval[1];
        // int i=0;
        // bool t=true;
        
        // while(i<n){
        //     int u=intervals[i][0];
        //     int v=intervals[i][1];
        //     if((u<a and u<b and v<a and v<b) || (u>a and u>b and v>a and v>b)){
        //         if((u>a and u>b and v>a and v>b) and t==true){
        //             ans.push_back({a,b});
        //             t=false;
        //             continue;
        //         }
        //         else{
        //             ans.push_back(intervals[i]);
        //         }
        //     }
        //     else{
        //         int p=u;
        //         int q;
        //         while(true){
        //             if(v>b){
        //                 if(intervals[i][0]>b){
        //                     t=true;
        //                     break;
        //                 }
        //                 q=v;
        //                 break;
        //             }
        //             else{
        //                 q=b;
        //             }
        //             i++;
        //             v=intervals[i][1];
        //         }
        //         t=false;
        //         ans.push_back({p,q});
        //     }
        //     i++;
        // }
        // if(t==true){
        //     ans.push_back(intervals[n-1]);
        // }
        // if(intervals[i-1][1]<a){
        //     ans.push_back({a,b});
        // }
        // return ans;
        
        int i=0;
        while(i<n && newInterval[0]>intervals[i][1]){
            ans.push_back(intervals[i]);
            i++;
        }
        
        while(i<n && newInterval[1]>=intervals[i][0]){
            newInterval[0]=min(newInterval[0],intervals[i][0]);
            newInterval[1]=max(newInterval[1],intervals[i][1]);
            i++;
        }
        ans.push_back(newInterval);
        while(i<n){
            ans.push_back(intervals[i]);
            i++;
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<vector<int>> intervals(N, vector<int>(2));
        for (int i = 0; i < N; i++) {
            cin >> intervals[i][0] >> intervals[i][1];
        }
        vector<int> newInterval(2);
        cin >> newInterval[0] >> newInterval[1];

        Solution obj;
        vector<vector<int>> ans = obj.insertInterval(intervals, newInterval);
        cout << "[";
        for (int i = 0; i < ans.size(); i++) {
            cout << "[" << ans[i][0] << ',' << ans[i][1] << ']';
            if (i != (ans.size() - 1))
                cout << ",";
        }
        cout << "]" << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
