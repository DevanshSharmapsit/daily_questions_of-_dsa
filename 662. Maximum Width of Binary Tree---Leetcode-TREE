/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
// this is a wrong attempt for thius solution....
    // int sum = 0;
    // int levels = 0;
    // bool t = false;
    // int solve(TreeNode* root, int levels, int sum,TreeNode* node) {
    //     if (root == NULL) {
    //         t = true;
    //         root=node;
    //         return 0; 
    //     }
    //     if (t == false) {
    //         if (root != NULL and root->left != NULL) {
    //             solve(root->left, levels + 1, sum,node);
    //         } else if (root != NULL) {
    //             solve(root->right, levels + 1, sum + 1,node);
    //         }
    //     } else {
    //         if (root != NULL and root->right != NULL) {
    //             solve(root->right, levels + 1, sum,node);
    //         } else if (root != NULL) {
    //             solve(root->left, levels + 1, sum + 1,node);
    //         }
    //     }
    //     levels=levels/2;
    //     return pow(2, levels) - sum;
    // }
    typedef unsigned long long ll;
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        ll maxwidth=0;
        while(!q.empty()){
            ll l=q.front().second;
            ll r=q.back().second;
            maxwidth=max(maxwidth,r-l+1);
            int n=q.size();
            while(n--){
                TreeNode* curr=q.front().first;
                ll idx=q.front().second;
                q.pop();
                if(curr->left){
                    q.push({curr->left,2*idx+1});
                }
                if(curr->right){
                    q.push({curr->right,2*idx+2});
                }
            }
        }
        return maxwidth;
    }
};
