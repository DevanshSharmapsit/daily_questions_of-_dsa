/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* dfs(TreeNode* root, unordered_set<int>&s ,vector<TreeNode*>&forest){
        if(root==NULL){
            return NULL;
        }
        root->left=dfs(root->left,s,forest);
        root->right=dfs(root->right,s,forest);

        if(s.find(root->val)!=s.end()){
            if(root->left!=NULL)
                forest.push_back(root->left);
            if(root->right!=NULL)
                forest.push_back(root->right);

            return NULL;
        }
        else{
            return root;
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*>forest;
        unordered_set<int>s;
        for(int &i:to_delete){
            s.insert(i);
        }
        dfs(root,s,forest);
        if(s.find(root->val)==s.end()){
            forest.push_back(root);
        }
        return forest;
    }
};
