class Solution {
public:
    unordered_map<int,vector<int>>adj;

    int bfs(int n){
        queue<int>q;
        q.push(0); //source
        vector<bool>visited(n,false);
        visited[0]=true;
        int level=0;
        while(!q.empty()){
            int k=q.size();
            while(k--){
                int f=q.front();
                q.pop();

                if(f==n-1){
                    return level;
                }

                for(int &nbr:adj[f]){
                    if(!visited[nbr]){
                        q.push(nbr);
                        visited[nbr]=true;
                    }
                }
            }
            level++;
        }
        return -1;
    }
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        int m=queries.size();
        for(int i=0;i<n-1;i++){
            adj[i].push_back(i+1);
        }
        vector<int>result;
        for(auto &que:queries){
            int u=que[0];
            int v=que[1];
            adj[u].push_back(v);
            int d=bfs(n);
            result.push_back(d);
        }
        return result;

    }
};
