/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int sum=0;
bool t=true;
    int solve(TreeNode* curr,TreeNode* parent){
        if(curr==NULL){
            return 0;
        }
        if(curr->left==NULL and curr->right==NULL){
            if(parent!=NULL && parent->left==curr){
                return curr->val;
            }
        }
        int left=solve(curr->left,curr);
        int right=solve(curr->right,curr);
        return left+right;
    }
    int sumOfLeftLeaves(TreeNode* root) {
        // if(root==NULL){
        //     return 0;
        // }
        // if(root->left==NULL and t==true){
        //     return sum+=root->val;
        // }
        // t=true;
        // sumOfLeftLeaves(root->left);
        // t=false;
        // sumOfLeftLeaves(root->right);
        // // t=true;

        // return sum;


        // if((root==NULL or root->left==NULL) and t==true){
        //     return 0;
        // }
        // t=false;
        // if(root->left==NULL and root->right==NULL){
        //     return root->val;
        // }
        // int leftsum=sumOfLeftLeaves(root->left);
        // sum+=leftsum;
        // int rightsum=sumOfLeftLeaves(root->right);
        // return sum;


        // if(root==NULL){
        //     return 0;
        // }
        // if(root->left==NULL and root->right==NULL){
        //     if(t==true){
        //         return 0;
        //     }
        //     return root->val;
        // }
        // t=false;
        // if(root->left!=NULL or root->right!=NULL){
        //     int left=sumOfLeftLeaves(root->left);
        //     sum+=left;
        //     sumOfLeftLeaves(root->right);
        // }
        // return sum;


        return solve(root,NULL);

    }
};
