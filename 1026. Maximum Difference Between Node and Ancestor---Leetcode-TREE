/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


//this is a brute force solution of this problem in this we have apply a time complexity of o(n^2);
class Solution {
public:
int maxdiff=-1;
    void dfs(TreeNode*root,TreeNode*curr){
        if(root==NULL or curr==NULL){
            return;
        }
        if(maxdiff<abs((curr->val)-(root->val))){
            maxdiff=abs((curr->val)-(root->val));
        }
        dfs(root,curr->left);
        dfs(root,curr->right);
        return;
        

    }
    void findmaxdiff(TreeNode* root){
        if(root==NULL){return;}
        dfs(root,root->left);
        dfs(root,root->right);

        findmaxdiff(root->left);
        findmaxdiff(root->right);
        return;

    }
    int maxAncestorDiff(TreeNode* root) {
        findmaxdiff(root);
        return maxdiff;
    }
};


//this is a optimal solution wit a time complexity of o(n).
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root,int mx,int mn){
        if(root==NULL){
            return abs(mx-mn);
        }
        mx=max(root->val,mx);
        mn=min(root->val,mn);
        int l=solve(root->left,mx,mn);
        int r=solve(root->right,mx,mn);
        return max(l,r);
    }
    int maxAncestorDiff(TreeNode* root) {
        return solve(root,root->val,root->val);
    }
};
