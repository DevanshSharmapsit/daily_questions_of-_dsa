//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    // Function to find the smallest positive number missing from the array.
    int missingNumber(vector<int> &arr) {
        // Your code here
        //unordered_map<int,int>mp;
        
        //for(int i=0;i<arr.size();i++){
          //  mp[arr[i]]++;
        //}
        //int i=1;
        //while(true){
          //  if(mp.find(i)!=mp.end()){
            //    i++;
            //}
            //else{
              //  return i;
            //}
        //}
        //return i;

        int n=arr.size();
        int i=0;
        while(i<n){
            if(arr[i]>0 and arr[i]<=n and arr[i]!=arr[arr[i]-1]){
                swap(arr[i],arr[arr[i]-1]);
            }else{
                i++;
            }
        }
        for(int j=0;j<n;j++){
            if(arr[j]!=j+1){
                return j+1;
            }
        }
        return n+1;
    }
};

//{ Driver Code Starts.

// int missingNumber(int arr[], int n);

int main() {

    // taking testcases
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {

        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        Solution ob;
        int result = ob.missingNumber(arr);
        cout << result << "\n";
    }
    return 0;
}
// } Driver Code Ends
