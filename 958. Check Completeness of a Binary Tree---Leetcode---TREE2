
//by using dfs approach.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//using dfs approach.............................
    int countnodes(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        return 1 + countnodes(root->left) + countnodes(root->right);
    }
    bool dfs(TreeNode* root,int i,int totalnodes){
        if(root==NULL){
            return true;
        }
        if(totalnodes<i){
            return false;
        }
        return dfs(root->left,2*i,totalnodes) && dfs(root->right,2*i+1,totalnodes);
    }
    bool isCompleteTree(TreeNode* root) {
        int totalnodes=countnodes(root);
        int i=1;
        return dfs(root,i,totalnodes);
    }
};
