class Solution {
public:
int n;
bool ispalindrome(string s,int start,int end){
    while(start<=end){
        if(s[start]!=s[end]){
            return false;
        }
        start++;
        end--;
    }
    return true;
}
    void backtracking(int idx,string &s,vector<string>&curr,vector<vector<string>>&res){
        if(idx==n){
            res.push_back(curr);
            return;
        }
        for(int i=idx;i<n;i++){
            if(ispalindrome(s,idx,i)){
                curr.push_back(s.substr(idx,i-idx+1));
                backtracking(i+1,s,curr,res);
                curr.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        n=s.size();
        vector<vector<string>>res;
        vector<string>curr;
        backtracking(0,s,curr,res);
        return res;
    }
};
