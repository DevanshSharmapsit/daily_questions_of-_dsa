/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& inorder,int instart,int inend,vector<int>& postorder,int poststart,int postend,unordered_map<int,int>&mp){
        if(postend<poststart || instart>inend){
            return nullptr;
        }
        int rootvalue=postorder[postend];
        TreeNode* root=new TreeNode(rootvalue);
        if(postend==poststart){
            return root;
        }
        int rootindex=mp[rootvalue];
        int leftsubtreesize=rootindex-instart;
        root->left=solve(inorder,instart,rootindex-1,postorder,poststart,poststart+leftsubtreesize-1,mp);
        root->right=solve(inorder,rootindex+1,inend,postorder,poststart+leftsubtreesize,postend-1,mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.empty() || postorder.empty()){
            return nullptr;
        }
        
        unordered_map<int,int>mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        int n=inorder.size();
        int m=postorder.size();
        return solve(inorder,0,n-1,postorder,0,m-1,mp);
    }
};
