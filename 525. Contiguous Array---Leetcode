class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        // vector<int>presum;
        // presum.push_back(nums[0]);
        // for(int i=1;i<nums.size();i++){
        //     if(nums[i]==0){
        //         presum.push_back(presum[i-1]-1);
        //     }
        //     else{
        //         presum.push_back(presum[i-1]+1);
        //     }
        // }
        // // unordered_map<int,int>hashmap;
        // // for(auto i:presum){
            
        // // }

        // int i=0;
        // int j=0;

        // while(i<j){
        //     if(presum[i]==presum[j]){
        //         break;
        //     }
        //     else{

        //     }
        // }

        // for(int i=0;i<nums.size();i++){
        //     if(nums[i]==0){
        //         nums[i]=-1;
        //     }
        // }
        
        // int i=1;
        // int j=0;
        // int sum=nums[0];
        // int max=0;
        // while(true){
        //     if(sum==0){
        //         int count=i-j+1;
        //         if(count>max){
        //             max=count;
        //             break;
        //         }
        //     }
        //     sum+=nums[i];
        // }

        // for(int i=0;i<nums.size();i++){
        //     int sum=0;
        //     for(int j=i;j<nums.size();j++){
        //         sum+=nums[j];
        //         if(sum==0){
        //             int count=j-i+1;
        //             if(count>max){
        //                 max=count;
        //             }
        //         }
        //     }
        // }
        // return max;


        // new solution final

        int result=0;
        int currsum=0;
        unordered_map<int,int>hashmap;
        hashmap[0]=-1;
        for(int i=0;i<nums.size();i++){
            currsum+=(nums[i]==1)?1:-1;
            if(hashmap.find(currsum)!=hashmap.end()){
                result=max(result,i-hashmap[currsum]);
            }
            else{
                hashmap[currsum]=i;
            }
        }
        return result;
    }
};
