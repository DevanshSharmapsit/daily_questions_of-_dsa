class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        // if(n==0){
        //     return true;
        // }
        // int m=flowerbed.size();
        // int zeroes=0;
        // int ones=0;
        // for(int i=0;i<m;i++){
        //     if(flowerbed[i]==1){
        //         ones++;
        //     }
        //     else{
        //         zeroes++;
        //     }
        // }
        // int k=2*n+1;
        // if(ones>zeroes){
        //     return false;
        // }
        // if(k<=zeroes){
        //     return true;
        // }
        // return false;
        // if(zeroes-n>=2){
        //     return true;
        // }
        // return false;
        // if(n==0){
        //     return true;
        // }
        // int i = 0;
        // if(flowerbed[i]==0 and flowerbed.size()==1 and n<=1){
        //     return true;
        // }
        // while (i < flowerbed.size()) {
        //     if (flowerbed[i] == 1) {
        //         i++;
        //         continue;
        //     } else {
        //         if(n==0){
        //                 return true;
        //         }
        //         if(i==flowerbed.size()-1 and flowerbed[i]==0 and
        //         flowerbed[i-1]==0 and i!=0){
        //             n--;
        //             if(n==0){
        //                 return true;
        //             }
        //         }
        //         if (i == 0 and i < flowerbed.size() and i!=flowerbed.size()-1
        //         and flowerbed[i + 1] == 0) {
        //             flowerbed[i]=1;
        //             n--;
        //             if(n==0){
        //                 return true;
        //             }
        //         } else {
        //             if (flowerbed[i - 1] == 0 and flowerbed[i + 1] == 0) {
        //                 flowerbed[i]=1;
        //                 n--;
        //                 if (n == 0) {
        //                     return true;
        //                 }
        //             }
        //         }
        //     }
        //     i++;
        // }
        // if(n>0){
        //     return false;
        // }
        // return true;

        if(n==0){
            return true;
        }
        int l=flowerbed.size() - 1;
        for (int i = 0; i < flowerbed.size(); i++) {
            if (flowerbed[i] == 0) {
                bool left = ( (i == 0) || (flowerbed[i - 1] == 0));
                bool right =((i ==l) || (flowerbed[i + 1] == 0));
                if (left && right) {
                    flowerbed[i] = 1;
                    n--;
                }
                if (n == 0) {
                    return true;
                }
            }
        }
        return false;
    }
};
