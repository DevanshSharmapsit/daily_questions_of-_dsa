class Solution {
public:
int n,m;
    int DFS(vector<vector<int>>& grid,int i,int j){
        if(i>=n || i<0 || j>=m || j<0 || grid[i][j]==0){
            return 0;
        }
        int maxgold=0;
        int maxgoldstart=grid[i][j];
        grid[i][j]=0;
        int d=DFS(grid,i+1,j);
        int u=DFS(grid,i-1,j);
        int r=DFS(grid,i,j+1);
        int l=DFS(grid,i,j-1);
        grid[i][j]=maxgoldstart;
        return max(d,max(u,max(l,r)))+maxgoldstart;
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        n=grid.size();
        m=grid[0].size();
        int maxgold=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0){
                    maxgold=max(maxgold,DFS(grid,i,j));
                }
            }
        }
        return maxgold;
    }
};
