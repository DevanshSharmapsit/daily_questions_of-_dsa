class Solution {
public:
    int longestIdealString(string s, int k) {
    //     string ans="";
    //     int maxi=INT_MIN;
    //     unordered_map<char,int>mp;
    //     for(int i=0;i<26;i++){
    //         mp['a'+i]=i+1;
    //     }
    //     int j=0;
    //     int i=1;
    //     while(j<s.size()){
    //         ans+=s[j];
    //     while(i<s.size()){
    //         int a=mp[ans[i-1]];
    //         int b=mp[s[i]];
    //         cout<<a<<" "<<b<<endl;
    //         if(abs(a-b)<=k){
    //             ans+=s[i];
    //         }
    //         i++;
    //     }
    //     maxi=max(maxi,static_cast<int>(ans.size()));
    //     ans="";
    //     j++;
    // }
    //     return maxi+1;


    // this problem is solved by using the dp.
    int n=s.size();
    vector<int>t(26,0);
    int result=0;
    for(int i=0;i<n;i++){
        int curr=s[i]-'a';
        int left=max(0,curr-k);
        int right=min(25,curr+k);
        int longest=0;
        for(int j=left;j<=right;j++){
            longest=max(longest,t[j]);
        }
        t[curr]=longest+1;
        result=max(result,t[curr]);
    }
    return result;
    }
};
