class Solution {
public:
    int n;
    int m;
    void dfs(vector<vector<char>>& grid,int i,int j){
        if(i<0 || j<0 || i>=n || j>=m || grid[i][j]!='1'){
            return;
        }
        grid[i][j]='0';

        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j-1);
        dfs(grid,i,j+1);
    }
    int numIslands(vector<vector<char>>& grid) {
        // for(int i=0;i<n;i++){
        //     bool t=false;
        //     for(int j=0;j<m;j++){
        //         if(i==m-1 and j==n-1 and (grid[i][j-1]=='1' or grid[i-1][j]=='1') and grid[i][j]=='1'){
        //                 return count;
        //         }
        //         if(grid[i][j]=='1'){
        //             if(j>0 and i>0 and (grid[i][j-1]=='1' or grid[i-1][j]=='1') and t==true and j!=n-1){
        //                 count+=1;
        //             }
        //             else if(i==0 and j>0 and grid[i][j-1]=='1' and t==true){
        //                 continue;
        //             }
        //             else if(i>0 and grid[i-1][j]=='1' and t==false){
        //                 continue;
        //             }
        //             else{
        //                 count+=1;
        //                 t=true;
        //             }
        //         }
        //         cout<<count<<endl;
        //     }
        // }
        // return count;

        n=grid.size();
        m=grid[0].size();
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        return count;
        
    }
};
