class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        // appraoch 1 ----->>>>>>
        // int n=nums1.size();
        // int m=nums2.size();
        // vector<int>ans;
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
        //         if(nums1[i]==nums2[j]){
        //             ans.push_back(nums1[i]);
        //             nums2[j]=-1;
        //             break;
        //         }
        //     }
        // }
        // return ans;

        // approach 2----->>>>>
        // sort(nums1.begin(),nums1.end());
        // sort(nums2.begin(),nums2.end());
        // int i=0;
        // int j=0;
        // vector<int>ans(nums1.size());
        // while(i<nums1.size() and j<nums2.size()){
        //     if(nums1[i]==nums2[j]){
        //         ans.push_back(nums1[i]);
        //         i++;
        //         j++;
        //     }
        //     else{
        //         if(nums1[i]>nums2[j]){
        //             j++;
        //         }
        //         else{
        //             i++;
        //         }
        //     }
        // }
        // return ans;

        // appraoch 3------->>>>>>>

        unordered_map<int,int>mp;
        for(int i=0;i<nums2.size();i++){
            mp[nums2[i]]++;
        }
        vector<int>ans;
        for(int i=0;i<nums1.size();i++){
            if(mp.find(nums1[i])!=mp.end() and mp[nums1[i]]!=0){
                ans.push_back(nums1[i]);
                mp[nums1[i]]--;
            }
        }
        return ans;
    }
};
