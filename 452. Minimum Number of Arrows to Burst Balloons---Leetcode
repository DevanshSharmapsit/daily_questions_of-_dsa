class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        sort(points.begin(),points.end());
        // int count=0;
        // int i=0;
        // int n=points.size();
        // while(i<n){
        //     if(i==n-1){
        //         count++;
        //         break;
        //     }
        //     if(points[i][1]<=points[i+1][1] and points[i][0]<=points[i+1][0] and points[i][1]>=points[i+1][0]){
        //         count++;
        //         i++;
        //         while(1){
        //             if(i<n and points[i][1]<=points[i+1][1] and points[i][0]<=points[i+1][0] and points[i][1]>=points[i+1][0]){
        //                 i++;
        //             }
        //             else{
        //                 break;
        //             }
        //         }
        //     }
        //     else{
        //         count++;
        //     }
        //     if(i==n){
        //         break;
        //     }
        //     i++;
        // }

        int count=1;
        int n=points.size();
        vector<int>prev=points[0];

        for(int i=1;i<n;i++){
            int currstartpoint=points[i][0];
            int currendpoint=points[i][1];
            int prevstartpoint=prev[0];
            int prevendpoint=prev[1];
            if(currstartpoint>prevendpoint){
                // no overlapping
                count++;
                prev=points[i];
            }
            else{
                // overlapping point
                prev[0]=max(prevstartpoint,currstartpoint);
                prev[1]=min(prevendpoint,currendpoint);
            }
        }
        return count;
    }
};
