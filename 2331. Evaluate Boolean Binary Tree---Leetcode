/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     bool evaluateTree(TreeNode* root) {
//         return solve(root);
//     }
//     int solve(TreeNode* root){
//         if(root->left==NULL and root->right==NULL){
//             return 0;
//         }
//         solve(root->left);
//         if(root->right->val==1 or root->right->val==0 and root->left->val==1 or root->left->val==0 ){
//             if(root->val==2){
//                 if(root->left->val==1 or root->right->val==1){
//                     root->val=1;
//                     return;
//                 }
//                 else{
//                     root->val=0;
//                     return;
//                 }

//             }
//             else{
//                 if(root->left->val==0 or root->right->val==0){
//                     root->val=0;
//                     return;
//                 }
//                 else{
//                     root->val=1;
//                     return;
//                 }
//             }
//         }
//         solve(root->right);
//     }
// };


class Solution {
public:
    bool evaluateTree(TreeNode* root) {
        return evaluateNode(root);
    }
    
    int evaluateNode(TreeNode* node) {
        if (node->left==NULL and node->right==NULL) {
            if(node->val==0)
            return 0;
            else{
                return 1;
            }
        }

        // Evaluate the left and right subtrees
        int leftValue = evaluateNode(node->left);
        int rightValue = evaluateNode(node->right);

        // Evaluate the current node based on the values of its children
        if (node->val == 2) {
            // Implement the logic for node value 2
            // You can define your own logic based on the requirements
            return (leftValue || rightValue);
        } else { // Assuming the valid node values are 0, 1, and 2
            // Implement the logic for node values 0 and 1
            // You can define your own logic based on the requirements
            return (leftValue && rightValue);
        }
    }
};
