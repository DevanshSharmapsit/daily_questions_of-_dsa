/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int count=0;
        ListNode* temp=head;
        if(temp==NULL){
            return NULL;
        }
        while(temp!=NULL){
            count++;
            temp=temp->next;   
        }
        int m=count-k;
        temp=head;
        // cout<<count<<endl;
        int mount=0;
        // if(m==0){
        //     return temp->next;
        // }
        ListNode* fptr=head;
        int fn=k-1;
        while(fn--){
            fptr=fptr->next;
        }
        int fv=fptr->val;
        while(m--){
            temp=temp->next;
        }
        fptr->val=temp->val;
        temp->val=fv;
        return head;
    }
};
