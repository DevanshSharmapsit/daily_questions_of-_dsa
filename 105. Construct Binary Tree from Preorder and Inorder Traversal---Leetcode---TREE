/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& preorder, vector<int>& inorder,int &idx,int start,int end){
        if(start>end){
            return NULL;
        }
        int val=preorder[idx];
        TreeNode* root=new TreeNode(val);
        int i=start;
        for(;i<end;i++){
            if(inorder[i]==val){
                break;
            }
        }
        idx++;
        root->left=solve(preorder,inorder,idx,start,i-1);
        root->right=solve(preorder,inorder,idx,i+1,end);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        int idx=0;
        return solve(preorder,inorder,idx,0,n-1);
    }
};



//this is a second way of doing this problem in a very efficient way by using the map to find the index of the root element in the inorder vector.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildatree(vector<int>&preorder,vector<int>&inorder,int prestart,int preend,int instart,int inend,unordered_map<int,int>&mp){
        if(prestart>preend || instart>inend){
            return NULL;
        }
        // int val=mp[prestart];
        TreeNode* rootNode=new TreeNode(preorder[prestart]);
        int rootinorderindex=mp[rootNode->val];
        int leftsubtreeelements=rootinorderindex-instart;
        rootNode->left=buildatree(preorder,inorder,prestart+1,prestart+leftsubtreeelements,instart,rootinorderindex-1,mp);
        rootNode->right=buildatree(preorder,inorder,prestart+leftsubtreeelements+1,preend,rootinorderindex+1,inend,mp);
        return rootNode;

    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int>mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        return buildatree(preorder,inorder,0,preorder.size()-1,0,inorder.size()-1,mp);
    }
};
